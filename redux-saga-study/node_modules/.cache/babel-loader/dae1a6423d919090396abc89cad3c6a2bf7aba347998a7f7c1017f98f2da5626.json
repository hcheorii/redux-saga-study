{"ast":null,"code":"import { takeLatest, call, all, put } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { SEARCH_USERS_FAIL, SEARCH_USERS_REQ, SEARCH_USERS_SUCEESS } from \"./action\";\nfunction getUsers(params = \"\") {\n  return axios.get(\"http://localhost:8080/users\" + params);\n}\n\n//이 함수는 사용자 검색 액션 요청에 따라 실행되는 함수로\n//이 함수를 통해 액션을 dispatch(전달? 실행?) 해서 api를 호출하여\n//그 결과를 전달할 예정\nfunction* searchRequest(action) {\n  const userData = yield call(getUsers, action.params);\n  try {\n    yield put({\n      type: SEARCH_USERS_SUCEESS,\n      data: userData.data\n    });\n  } catch (error) {\n    yield put({\n      type: SEARCH_USERS_FAIL,\n      data: error.response.data\n    });\n  }\n}\nfunction* waitSearchReq() {\n  //yield키워드는 다음 동작을 제어하는 의미를 가진 es6문법\n  //takeLatest는 가장 마지막에 실행된 액션을 감지하는 것\n  yield takeLatest(SEARCH_USERS_REQ);\n}\nexport default function* userSaga() {\n  yield all([waitSearchReq()]);\n}","map":{"version":3,"names":["takeLatest","call","all","put","axios","SEARCH_USERS_FAIL","SEARCH_USERS_REQ","SEARCH_USERS_SUCEESS","getUsers","params","get","searchRequest","action","userData","type","data","error","response","waitSearchReq","userSaga"],"sources":["/Users/ihyeoncheol/Desktop/redux-saga-study/src/reducers/user/saga.js"],"sourcesContent":["import { takeLatest, call, all, put } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n    SEARCH_USERS_FAIL,\n    SEARCH_USERS_REQ,\n    SEARCH_USERS_SUCEESS,\n} from \"./action\";\nfunction getUsers(params = \"\") {\n    return axios.get(\"http://localhost:8080/users\" + params);\n}\n\n//이 함수는 사용자 검색 액션 요청에 따라 실행되는 함수로\n//이 함수를 통해 액션을 dispatch(전달? 실행?) 해서 api를 호출하여\n//그 결과를 전달할 예정\nfunction* searchRequest(action) {\n    const userData = yield call(getUsers, action.params);\n\n    try {\n        yield put({ type: SEARCH_USERS_SUCEESS, data: userData.data });\n    } catch (error) {\n        yield put({ type: SEARCH_USERS_FAIL, data: error.response.data });\n    }\n}\n\nfunction* waitSearchReq() {\n    //yield키워드는 다음 동작을 제어하는 의미를 가진 es6문법\n    //takeLatest는 가장 마지막에 실행된 액션을 감지하는 것\n    yield takeLatest(SEARCH_USERS_REQ);\n}\n\nexport default function* userSaga() {\n    yield all([waitSearchReq()]);\n}\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,IAAI,EAAEC,GAAG,EAAEC,GAAG,QAAQ,oBAAoB;AAC/D,OAAOC,KAAK,MAAM,OAAO;AACzB,SACIC,iBAAiB,EACjBC,gBAAgB,EAChBC,oBAAoB,QACjB,UAAU;AACjB,SAASC,QAAQA,CAACC,MAAM,GAAG,EAAE,EAAE;EAC3B,OAAOL,KAAK,CAACM,GAAG,CAAC,6BAA6B,GAAGD,MAAM,CAAC;AAC5D;;AAEA;AACA;AACA;AACA,UAAUE,aAAaA,CAACC,MAAM,EAAE;EAC5B,MAAMC,QAAQ,GAAG,MAAMZ,IAAI,CAACO,QAAQ,EAAEI,MAAM,CAACH,MAAM,CAAC;EAEpD,IAAI;IACA,MAAMN,GAAG,CAAC;MAAEW,IAAI,EAAEP,oBAAoB;MAAEQ,IAAI,EAAEF,QAAQ,CAACE;IAAK,CAAC,CAAC;EAClE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,MAAMb,GAAG,CAAC;MAAEW,IAAI,EAAET,iBAAiB;MAAEU,IAAI,EAAEC,KAAK,CAACC,QAAQ,CAACF;IAAK,CAAC,CAAC;EACrE;AACJ;AAEA,UAAUG,aAAaA,CAAA,EAAG;EACtB;EACA;EACA,MAAMlB,UAAU,CAACM,gBAAgB,CAAC;AACtC;AAEA,eAAe,UAAUa,QAAQA,CAAA,EAAG;EAChC,MAAMjB,GAAG,CAAC,CAACgB,aAAa,CAAC,CAAC,CAAC,CAAC;AAChC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}