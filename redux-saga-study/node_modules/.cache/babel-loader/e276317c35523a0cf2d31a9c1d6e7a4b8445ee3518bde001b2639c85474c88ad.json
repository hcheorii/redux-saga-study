{"ast":null,"code":"import axios from \"axios\";\nimport { takeLatest, call, all, put } from \"redux-saga/effects\";\nimport { SEARCH_USERS_SUCEESS, SEARCH_USERS_FAIL, SEARCH_USERS_REQ } from \"./action\";\nfunction getUsers(params = \"\") {\n  // 먼저 api호출을 위해 axios 패키지를 다운로드 받습니다\n  // 아까 서버에서요청한 users api를 호출하기위해 해당 주소를 가져오고\n  // params를 합쳐서 검색 조건에따라 필터되도록 할겁니다.\n  return axios.get(\"http://localhost:8080/users\" + params);\n}\n\n// 이함수는 사용자 검색 액션 요청에 따라 실행되는 함수로\n// 이 함수를통해 액션을 dispatch(전달? 실행?)해서 api를 호출하여\n// 그 결과를 전달할 예정입니다.....\n// 먼저 api를 호출하는 함수를 만듭니다.\nfunction* searchRequest(action) {\n  // 이제 순서대로 호출해보겠습니다...\n  // 먼저 call함수를 이용하여 api를 호출할 겁니다\n  // call은 함수를 동기적으로 실행해줍니다\n  // getUsers 함수를 호출하고 SEARCH_USERS_REQ 액션 실행시 전달되는\n  // params를 getUsers함수로 넘깁니다.\n  const userData = yield call(getUsers, action.params);\n\n  // 이제 put함수로 action을 dispatch(전달?)할겁니다.\n  // try catch문을 이용해서 성공시 실패시를 분기처리할겁니다.\n  try {\n    // 성공시 SEARCH_USERS_SUCCESS 액션을 디스패치하여 유저데이터를 넘깁니다.\n    yield put({\n      type: SEARCH_USERS_SUCCESS,\n      data: userData.data\n    });\n  } catch (error) {\n    // 실패시 SEARCH_USERS_FAIL 액션을 디스패치하여 에러를 넘깁니다...\n    yield put({\n      type: SEARCH_USERS_FAIL,\n      data: error.response.data\n    });\n  }\n}\n\n// 이제 SEARCH_USERS_REQ 액션을 감지하는 함수를 userSaga에 먼저 세팅합니다.\nfunction* waitSearchReq() {\n  // yield 키워드는 다음동작을 제어하는 의미를 가지는 es6문법입니다.\n  // takeLatest는 가장 마지막에 실행된 액션을 감지하는 것입니다.\n  // 두번째로 핸들러를 제공하여 실행할 함수를 구성합니다...\n  yield takeLatest(SEARCH_USERS_REQ, searchRequest);\n}\n\n// userSaga를 먼저 만들었습니다. 그다음 액션을 리슨하는 함수를 만들겁니다.\n// 액션을 리슨 한다는 것은 그 액션이 실행됨을 감지하는 함수입니다.\nexport default function* userSaga() {\n  // all 함수는 내부배열에 등록된 사가 함수들을 리덕스 사가 미들웨어에\n  // 등록하는 부수효과 함수입니다.\n  //이제 세팅되었으니 루트 사가 함수에 세팅합니다.\n  yield all([waitSearchReq()]);\n}","map":{"version":3,"names":["axios","takeLatest","call","all","put","SEARCH_USERS_SUCEESS","SEARCH_USERS_FAIL","SEARCH_USERS_REQ","getUsers","params","get","searchRequest","action","userData","type","SEARCH_USERS_SUCCESS","data","error","response","waitSearchReq","userSaga"],"sources":["/Users/ihyeoncheol/Desktop/redux-saga-study/src/reducers/user/saga.js"],"sourcesContent":["import axios from \"axios\";\nimport { takeLatest, call, all, put } from \"redux-saga/effects\";\n\nimport {\n    SEARCH_USERS_SUCEESS,\n    SEARCH_USERS_FAIL,\n    SEARCH_USERS_REQ,\n} from \"./action\";\nfunction getUsers(params = \"\") {\n    // 먼저 api호출을 위해 axios 패키지를 다운로드 받습니다\n    // 아까 서버에서요청한 users api를 호출하기위해 해당 주소를 가져오고\n    // params를 합쳐서 검색 조건에따라 필터되도록 할겁니다.\n    return axios.get(\"http://localhost:8080/users\" + params);\n}\n\n// 이함수는 사용자 검색 액션 요청에 따라 실행되는 함수로\n// 이 함수를통해 액션을 dispatch(전달? 실행?)해서 api를 호출하여\n// 그 결과를 전달할 예정입니다.....\n// 먼저 api를 호출하는 함수를 만듭니다.\nfunction* searchRequest(action) {\n    // 이제 순서대로 호출해보겠습니다...\n    // 먼저 call함수를 이용하여 api를 호출할 겁니다\n    // call은 함수를 동기적으로 실행해줍니다\n    // getUsers 함수를 호출하고 SEARCH_USERS_REQ 액션 실행시 전달되는\n    // params를 getUsers함수로 넘깁니다.\n    const userData = yield call(getUsers, action.params);\n\n    // 이제 put함수로 action을 dispatch(전달?)할겁니다.\n    // try catch문을 이용해서 성공시 실패시를 분기처리할겁니다.\n    try {\n        // 성공시 SEARCH_USERS_SUCCESS 액션을 디스패치하여 유저데이터를 넘깁니다.\n        yield put({ type: SEARCH_USERS_SUCCESS, data: userData.data });\n    } catch (error) {\n        // 실패시 SEARCH_USERS_FAIL 액션을 디스패치하여 에러를 넘깁니다...\n        yield put({ type: SEARCH_USERS_FAIL, data: error.response.data });\n    }\n}\n\n// 이제 SEARCH_USERS_REQ 액션을 감지하는 함수를 userSaga에 먼저 세팅합니다.\nfunction* waitSearchReq() {\n    // yield 키워드는 다음동작을 제어하는 의미를 가지는 es6문법입니다.\n    // takeLatest는 가장 마지막에 실행된 액션을 감지하는 것입니다.\n    // 두번째로 핸들러를 제공하여 실행할 함수를 구성합니다...\n    yield takeLatest(SEARCH_USERS_REQ, searchRequest);\n}\n\n// userSaga를 먼저 만들었습니다. 그다음 액션을 리슨하는 함수를 만들겁니다.\n// 액션을 리슨 한다는 것은 그 액션이 실행됨을 감지하는 함수입니다.\nexport default function* userSaga() {\n    // all 함수는 내부배열에 등록된 사가 함수들을 리덕스 사가 미들웨어에\n    // 등록하는 부수효과 함수입니다.\n    //이제 세팅되었으니 루트 사가 함수에 세팅합니다.\n    yield all([waitSearchReq()]);\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,EAAEC,IAAI,EAAEC,GAAG,EAAEC,GAAG,QAAQ,oBAAoB;AAE/D,SACIC,oBAAoB,EACpBC,iBAAiB,EACjBC,gBAAgB,QACb,UAAU;AACjB,SAASC,QAAQA,CAACC,MAAM,GAAG,EAAE,EAAE;EAC3B;EACA;EACA;EACA,OAAOT,KAAK,CAACU,GAAG,CAAC,6BAA6B,GAAGD,MAAM,CAAC;AAC5D;;AAEA;AACA;AACA;AACA;AACA,UAAUE,aAAaA,CAACC,MAAM,EAAE;EAC5B;EACA;EACA;EACA;EACA;EACA,MAAMC,QAAQ,GAAG,MAAMX,IAAI,CAACM,QAAQ,EAAEI,MAAM,CAACH,MAAM,CAAC;;EAEpD;EACA;EACA,IAAI;IACA;IACA,MAAML,GAAG,CAAC;MAAEU,IAAI,EAAEC,oBAAoB;MAAEC,IAAI,EAAEH,QAAQ,CAACG;IAAK,CAAC,CAAC;EAClE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ;IACA,MAAMb,GAAG,CAAC;MAAEU,IAAI,EAAER,iBAAiB;MAAEU,IAAI,EAAEC,KAAK,CAACC,QAAQ,CAACF;IAAK,CAAC,CAAC;EACrE;AACJ;;AAEA;AACA,UAAUG,aAAaA,CAAA,EAAG;EACtB;EACA;EACA;EACA,MAAMlB,UAAU,CAACM,gBAAgB,EAAEI,aAAa,CAAC;AACrD;;AAEA;AACA;AACA,eAAe,UAAUS,QAAQA,CAAA,EAAG;EAChC;EACA;EACA;EACA,MAAMjB,GAAG,CAAC,CAACgB,aAAa,CAAC,CAAC,CAAC,CAAC;AAChC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}